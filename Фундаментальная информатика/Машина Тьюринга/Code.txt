
# Перевод из двоичной системы счисления в унарную


# 11 11 |||
# оригинал (lgap) копия (gap) палочки

0, ,<,iskol
#=====FUN Initial_Skip_original_to_left=======
iskol,1,<,iskol
iskol,0,<,iskol
iskol, ,>,st_cp


#=====FUN Skip_original_to_left_for_1=======
skol1,1,<,skol1
skol1,0,<,skol1
skol1, ,1,skol_setted_1
skol_setted_1,1,>,st_cp #Начинаем копировать

#=====FUN Skip_original_to_left_for_0=======
skol0,1,<,skol0
skol0,0,<,skol0
skol0, ,0,skol_setted_0
skol_setted_0,0,>,st_cp #Начинаем копировать


# Начинать с символа, который хотим cкопировать
#======FUN Start_copy=====
st_cp,1, ,cp_1   # start copy 1
st_cp,0, ,cp_0 # start copy 0
st_cp, ,>,scr  # Всё скопировали (находимся в gap, начинаем пропускать копию, skip copy to r)

# Вызывается с места стёртой единички
#======FUN Copy_1======
cp_1, ,>,cp_1_1st # 1st - скип оригинала
cp_1_1st,0,>,cp_1_1st  # Идём направо, скипаем оригинал
cp_1_1st,1,>,cp_1_1st 
cp_1_1st, ,>,cp_1_2st  # Прошли слово, теперь необходимо пропустить копию (2st -> скип копии)
cp_1_2st,0,>,cp_1_2st 
cp_1_2st,1,>,cp_1_2st
cp_1_2st, ,1,cp_1_3st  # Перешли в пустую в ячейку, вписали единичку, пошли налево (3st <- skip)
cp_1_3st,1,<,cp_1_3st  # 3st - скип копии (налево)
cp_1_3st,0,<,cp_1_3st  
cp_1_3st, ,<,skol1  # Дошли до lgap, идём налево, вернём "1" (skip original to left for 1) 


# Вызывается с места стёртого нуля
#======FUN Copy_0======
cp_0, ,>,cp_0_1st # 1st - скип оригинала
cp_0_1st,0,>,cp_0_1st  # Идём направо, скипаем оригинал
cp_0_1st,1,>,cp_0_1st 
cp_0_1st, ,>,cp_0_2st  # Прошли слово, теперь необходимо пропустить копию (2st -> скип копии)
cp_0_2st,0,>,cp_0_2st 
cp_0_2st,1,>,cp_0_2st
cp_0_2st, ,0,cp_0_3st  # Перешли в пустую в ячейку, вписали нуль, пошли налево (3st <- skip)
cp_0_3st,1,<,cp_0_3st  # 3st - скип копии (налево)
cp_0_3st,0,<,cp_0_3st
cp_0_3st, ,<,skol0  # Дошли до lgap, идём налево, вернём "0" (skip original to left for 0)

# Начинаем с первого символа копии
#======FUN Skip_copy_to_right====
scr,0,>,scr
scr,1,>,scr
scr, , ,stm # Дошли до конца, начинаем вычитать 

# Вызывать из gap
#======FUN Start_minus (stm)====
stm, ,<,stm
stm,1,1,stm_1 # Начинаем вычитать для единички
stm,0,0,stm_0 # Начинаем вычитать для нуля
stm,|,>,ste # Копия была заменена единичками 

#======FUN start end of programm(ste)=====
#scenario 1
ste, ,|,ste_1st
ste_1st,|,>,ste_1st
ste_1st, ,<,ste_2st
ste_2st,|, ,ste_2st
ste_2st, ,#,ste_2st


#scenario 0 (если был введён нуль - стереть лишнюю палочку и копию)
# Проверка на нуль
# Попадаем сюда, если длина палочек <= длине аргумента
ste_0,|,<,ste_2f
ste_2f,|,>,ste_2st # всё ок, это не нуль

ste_2f, ,>,ste_3f # нет, это нуль
ste_3f,|,0,ste_0

ste_0,0, ,ste_1f
ste_1f, ,<,ste_0
ste_0, ,#,ste_0


# Вызывать с ещё не вычтенной единички! (Solid))))
#======FUN Start_minus_for_1=====
stm_1,1,0,stm_1_0st # Вычитаем единичку
stm_1_0st,0,>,stm_1_1st # Пропускаем нуль, на котором стоим
stm_1_1st,1,>,stm_1_1st  # 1st -> пропустить копию
stm_1_1st, ,>,stm_1_2st # 2st -> начать пропускать палочки
stm_1_2st,|,>,stm_1_2st
stm_1_2st, ,|,stm_1_3st # Поставили палочку (начинаем пропускать палочки <-)
stm_1_3st,|,<,stm_1_4st # 4st <- пропустить палочки (Пропустив палочку, на которой стояли)
stm_1_4st,|,<,stm_1_4st
stm_1_4st, , ,stm       # Дошли до gap, начинаем вычитать

# Вызывать с ещё не вычтенного нуля! (Solid))))
#======FUN Start_minus_for_0=====
# С нулём сначала необходимо проверить, чтобы не было ситуации, когда копия = "0"
stm_0,0,<,chl # check last
chl,0,<,chl    # нужно проверить дальше, вдруг, там "0010"
chl,1,0,stm_0_ok    # всё ок, ВЫЧИТАЕМ ОТ ЕДИНИЧКИ и идём обрабатывать ост прошлые нули

chl,|,>,snm         # этот ноль был последним, начинаем приведение к нормированному виду
chl, ,>,snm         # этот ноль был последним, начинаем приведение к нормированному виду

stm_0_ok,0,>,stm_0_0st # Идём обрабатывать нуль
stm_0_0st,0,1,stm_0_1st # Меняем все нули до на единичку
stm_0_1st,1,>,stm_0_0st # ЦИКЛ (было бы в 1 строчку в пятёрках(()
stm_0_0st, ,>,stm_0_2st #ВЫХОД ИЗ ЦИКЛА 2st -> начать пропускать палочки

stm_0_2st,|,>,stm_0_2st
stm_0_2st, ,|,stm_0_3st # Поставили палочку (начинаем пропускать палочки <-)
stm_0_3st,|,<,stm_0_4st # 4st <- пропустить палочки (Пропустив палочку, на которой стояли)
stm_0_4st,|,<,stm_0_4st
stm_0_4st, , ,stm       # Дошли до gap, начинаем вычитать

# Вызывать с последнего нуля
#======FUN Start_normal========
snm,0,|,snm # [!!] Создаём ОДНУ ЛИШНЮЮ ПАЛОЧКУ (ЕЁ необходимо убрать в конце)
snm,|,>,snm_1st # 1st - идём вправо до палочки
snm_1st, ,>,check_is_end
check_is_end, ,<,ste_pre
ste_pre, ,<,ste_0
check_is_end,0,0,snm_1st
check_is_end,|,|,snm_1st
snm_1st,0,>,snm_1st
snm_1st,|,>,snm_2st # Нашли палочку, 2st - идём до последней
snm_2st,|,>,snm_2st
snm_2st, ,<,snm_3st # Останавливаемся на последней палочке
snm_3st,|, ,snm_4st # Удаляем её
snm_4st, ,<,snm_5st # Пропускаем пустоту и начинаем идти влево
snm_5st,|,<,snm_5st
snm_5st, ,<,stm # Дошли до gap (остановились на нуле) -> начинаем вычитать

